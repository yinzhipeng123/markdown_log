<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>MarkDown_Log</title><description>yinzhipengのmarkdown_log</description><link>https://yinzhipeng123.github.io/markdown_log/</link><atom:link href="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/yinzhipeng123/markdown_log/</docs><language>en-None</language> <pubDate>Fri, 31 Jan 2025 02:55:03 -0000</pubDate> <lastBuildDate>Fri, 31 Jan 2025 02:55:03 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.7.0</generator> <image> <url>https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png</url> <title>MarkDown_Log</title><link>https://yinzhipeng123.github.io/markdown_log/</link> </image> <item> <title>xpu</title> <description>&lt;p&gt;```[root@xxxx ~]# xpu_smi --helpKUNLUNXIN 系统管理接口 -- v&lt;/p&gt;&lt;p&gt;XPUSMI 提供用于 KUNLUNXIN 设备的监控信息。数据可以以纯文本或 XML 格式展示，通过标准输出或文件输出。XPUSMI 还提供若干管理操作，用于更改设备状态。&lt;/p&gt;&lt;p&gt;注意：XPUSMI...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/xpu/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/xpu/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/xpu/</guid> </item> <item> <title>ntp</title> <description>&lt;p&gt;&lt;strong&gt;NTPD (Network Time Protocol Daemon)&lt;/strong&gt; 是一个用于网络时间同步的服务，通过该服务可以让计算机或设备与标准时间源同步，以确保系统的时间准确性。NTP（Network Time Protocol）是一种广泛使用的协议，用于通过网络同步计算机的时钟，保持系统时间与 UTC（协调世...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/ntp/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/ntp/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/ntp/</guid> </item> <item> <title>Mac本地运行简单的ubantu</title> <description>&lt;h3&gt;&lt;strong&gt;使用 Multipass&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Multipass&lt;/strong&gt; 是由 Canonical（Ubuntu 的开发者）提供的工具，可以快速在 macOS 上启动轻量级的 Ubuntu 虚拟机。&lt;/p&gt;&lt;p&gt;使用 &lt;strong&gt;Hypervisor.framework&lt;/strong&gt;，这是 macOS 提供的本地虚拟化框架，类似于 Windo...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/Mac%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84ubantu/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/Mac%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84ubantu/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/Mac%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84ubantu/</guid> </item> <item> <title>Juju</title> <description>&lt;p&gt;结合 &lt;strong&gt;MAAS&lt;/strong&gt;（Metal as a Service）和 &lt;strong&gt;Juju&lt;/strong&gt; 来创建和管理本地物理机部署，是一个非常强大的组合，适用于管理大量裸机服务器并自动化应用部署。MAAS 可以让像管理云资源一样管理物理硬件，而 Juju 则可以自动化应用和服务的配置、部署、管理等。两者结合使用时，够通过 Juju ...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/MAAS_Juju/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/MAAS_Juju/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/MAAS_Juju/</guid> </item> <item> <title>MAAS</title> <description>&lt;p&gt;要使用 MAAS（Metal as a Service）管理裸金属服务器，需要完成一些基本的安装和配置步骤。以下是一个简单的指南，帮助速开始使用 MAAS：&lt;/p&gt;&lt;h3&gt;1. 安装 MAAS&lt;/h3&gt;&lt;p&gt;首先，需要在一台服务器上安装 MAAS。通常，安装 MAAS 的服务器被称为 &#34;MAAS controller&#34;。&lt;/p&gt;&lt;h2&gt;...&lt;/h2&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/MAAS/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/MAAS/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/MAAS/</guid> </item> <item> <title>DHCP_Relay</title> <description>&lt;p&gt;来帮助理解 &lt;strong&gt;DHCP Relay&lt;/strong&gt; 的作用。&lt;/p&gt;&lt;h3&gt;场景&lt;/h3&gt;&lt;p&gt;假设有一个公司网络，其中包含多个子网：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;子网 A&lt;/strong&gt;（办公区域）：&lt;code&gt;192.168.1.0/24&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;子网 B&lt;/strong&gt;（研发区域）：&lt;code&gt;192.168.2.0/24&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DHCP 服务器&lt;/strong&gt;：&lt;code&gt;192.168.100.10&lt;/code&gt;（位...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/DHCP_Relay/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/DHCP_Relay/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/DHCP_Relay/</guid> </item> <item> <title>Charm</title> <description>&lt;h3&gt;简单的 Charm 示例：部署一个简单的 Python Web 应用&lt;/h3&gt;&lt;p&gt;在这个例子中，将创建一个 Charm 来部署一个简单的 Python Web 应用，该应用会在浏览器中显示 &#34;Hello, World!&#34;。&lt;/p&gt;&lt;h4&gt;步骤 1：安装工具&lt;/h4&gt;&lt;p&gt;首先，确保已经安装了 Juju 和 `charmcraft...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/Charm/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:16 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/Charm/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/Charm/</guid> </item> <item> <title>缩短长连接</title> <description>&lt;p&gt;&lt;strong&gt;让长连接在不活跃时快速断开，以最大化释放系统资源&lt;/strong&gt;，可以通过以下几种方式来实现：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. 调整 TCP Keepalive 参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;通过调整 TCP Keepalive 的参数，可以在连接长时间不活跃时迅速检测并关闭无效连接。&lt;/p&gt;&lt;h4&gt;配置方法：&lt;/h4&gt;&lt;p&gt;编辑以下参数：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;**...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E7%BC%A9%E7%9F%AD%E9%95%BF%E8%BF%9E%E6%8E%A5/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:15 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E7%BC%A9%E7%9F%AD%E9%95%BF%E8%BF%9E%E6%8E%A5/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E7%BC%A9%E7%9F%AD%E9%95%BF%E8%BF%9E%E6%8E%A5/</guid> </item> <item> <title>给进程做coredump</title> <description>&lt;p&gt;给进程生成 coredump 通常是为了调试程序崩溃或异常行为。以下是常用的方法和步骤：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;1. &lt;strong&gt;检查和设置 coredump 大小限制&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Linux 默认可能禁止生成 coredump，或者限制其大小为 0。可以通过以下命令检查和设置限制：&lt;/p&gt;&lt;h4&gt;检查限制：&lt;/h4&gt;&lt;p&gt;```bashu...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E7%BB%99%E8%BF%9B%E7%A8%8B%E5%81%9Acoredump/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E7%BB%99%E8%BF%9B%E7%A8%8B%E5%81%9Acoredump/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E7%BB%99%E8%BF%9B%E7%A8%8B%E5%81%9Acoredump/</guid> </item> <item> <title>查询系统重启记录的方法</title> <description>&lt;p&gt;可以通过查询日志，判断是否人为执行重启命令&lt;/p&gt;&lt;p&gt;&lt;code&gt;grep -i &#39;shutdown\|reboot&#39; /var/log/securecat ~/.bash_history | grep -i &#39;shutdown\|reboot&#39;&lt;/code&gt;&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AF%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AF%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AF%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/</guid> </item> <item> <title>把任务存放后台</title> <description>&lt;p&gt;举个例子：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;你执行了一个命令，并按 &lt;code&gt;Ctrl + Z&lt;/code&gt; 暂停了它。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;code&gt;bash python script.py&lt;/code&gt;&lt;/p&gt;&lt;p&gt;假设在运行时你按了 &lt;code&gt;Ctrl + Z&lt;/code&gt;，此时任务会暂停并进入停止状态。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;然后你可以使用 &lt;code&gt;bg&lt;/code&gt; 命令将它放到后台继续执行： ...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%8A%8A%E4%BB%BB%E5%8A%A1%E5%AD%98%E6%94%BE%E5%90%8E%E5%8F%B0/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%8A%8A%E4%BB%BB%E5%8A%A1%E5%AD%98%E6%94%BE%E5%90%8E%E5%8F%B0/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E6%8A%8A%E4%BB%BB%E5%8A%A1%E5%AD%98%E6%94%BE%E5%90%8E%E5%8F%B0/</guid> </item> <item> <title>Linux加模块</title> <description>&lt;p&gt;如果你有一个 &lt;code&gt;.ko&lt;/code&gt; 文件（内核模块文件），并且想使用 &lt;code&gt;modprobe&lt;/code&gt; 加载它，通常需要将该模块文件放置在合适的目录下，或者手动指定模块的路径。&lt;code&gt;modprobe&lt;/code&gt; 默认会在 &lt;code&gt;/lib/modules/$(uname -r)/&lt;/code&gt; 目录下查找模块。如果模块不在该目录下，你需要将它复制到适当的位置，或者使...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E5%8A%A0%E8%BD%BD%E6%A8%A1/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E5%8A%A0%E8%BD%BD%E6%A8%A1/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/%E5%8A%A0%E8%BD%BD%E6%A8%A1/</guid> </item> <item> <title>感情处理</title> <description>&lt;p&gt;面对这样的情况，“不执着于欲望”并不是要放弃喜欢这个人，而是以一种更加智慧和坦然的方式处理自己的感情和现状。以下是一些实际的建议和行为方式：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. 接纳现实，调整心态&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;理解现状&lt;/strong&gt;：你喜欢她，但目前的经济条件可能不够理想，这是一个客观的现实。接受这一点，不要因此自卑或感到焦虑。...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/soft/%E6%84%9F%E6%83%85%E5%A4%84%E7%90%86/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/soft/%E6%84%9F%E6%83%85%E5%A4%84%E7%90%86/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/soft/%E6%84%9F%E6%83%85%E5%A4%84%E7%90%86/</guid> </item> <item> <title>不执着于欲望的行为表现</title> <description>&lt;p&gt;不执着于欲望的行为体现在对物质、情感和内心的平衡态度上，而不是完全否定欲望，而是学会不被欲望所控制，从而实现内心的自由与宁静。以下是一些具体的行为和实践：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;物质层面&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;简朴生活&lt;/strong&gt;：&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不贪恋奢华的物质享受，只追求基本的生活需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;对于财富或财物不贪...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/soft/%E4%B8%8D%E6%89%A7%E7%9D%80%E4%BA%8E%E6%AC%B2%E6%9C%9B%E7%9A%84%E8%A1%8C%E4%B8%BA%E8%A1%A8%E7%8E%B0/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:11 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/soft/%E4%B8%8D%E6%89%A7%E7%9D%80%E4%BA%8E%E6%AC%B2%E6%9C%9B%E7%9A%84%E8%A1%8C%E4%B8%BA%E8%A1%A8%E7%8E%B0/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/soft/%E4%B8%8D%E6%89%A7%E7%9D%80%E4%BA%8E%E6%AC%B2%E6%9C%9B%E7%9A%84%E8%A1%8C%E4%B8%BA%E8%A1%A8%E7%8E%B0/</guid> </item> <item> <title>tr</title> <description>&lt;p&gt;&lt;code&gt;tr&lt;/code&gt; 是 Linux 和 Unix 系统中的一个文本处理命令，名字来源于 &#34;translate&#34;（翻译/转换）。它主要用来转换或删除文本中的字符。&lt;code&gt;tr&lt;/code&gt; 从标准输入读取数据，处理后将结果输出到标准输出。&lt;/p&gt;&lt;h3&gt;基本用法&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;字符替换&lt;/strong&gt;&lt;br&gt; 替换一个字符为另一个字符：&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;```...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/tr/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:08 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/tr/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/tr/</guid> </item> <item> <title>numa</title> <description>&lt;p&gt;NUMA（Non-Uniform Memory Access，非统一内存访问）是一种&lt;strong&gt;计算机内存架构&lt;/strong&gt;，广泛应用于多处理器系统（如服务器和高性能计算系统），用于提高系统性能。&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;NUMA 的基本概念&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在 NUMA 架构中，每个 CPU（或 CPU 核心）都有直接连接的本地内存（lo...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/hardware/numa/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 31 Jan 2025 02:55:05 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/hardware/numa/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/hardware/numa/</guid> </item> <item> <title>Ansible实例</title> <description>&lt;p&gt;Ansible执行命令实例&lt;/p&gt;&lt;p&gt;&lt;code&gt;bashansible all -i host.txt -m shell -a &#34;mv /tmp/testfile /tmp/test&#34; -e &#39;ansible_ssh_common_args=&#34; -o StrictHostKeyChecking=no&#34;&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;`a...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E5%AE%9E%E4%BE%8B/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Sun, 12 Jan 2025 14:26:02 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E5%AE%9E%E4%BE%8B/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E5%AE%9E%E4%BE%8B/</guid> </item> <item> <title>Demo</title> <description>&lt;p&gt;一些bash的例子：&lt;/p&gt;&lt;h4&gt;在bash中设置异常捕获，监控循环中可能发生的错误&lt;/h4&gt;&lt;p&gt;```bash&lt;/p&gt;&lt;h1&gt;!/bin/bash&lt;/h1&gt;&lt;h1&gt;可以捕获失败的循环，把错误的循环次数打印在fail.txt中&lt;/h1&gt;&lt;p&gt;set -E&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;fail.txttrap &#39;echo $i &amp;gt;&amp;gt; fail.txt&#39; ERR&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;for ((...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/bash/demo/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Sun, 12 Jan 2025 14:26:02 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/bash/demo/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/bash/demo/</guid> </item> <item> <title>split</title> <description>&lt;p&gt;假设你的文件名是 &lt;code&gt;input.txt&lt;/code&gt;，你希望将它拆分成每个文件包含 10 行：&lt;/p&gt;&lt;p&gt;&lt;code&gt;split -l 10 input.txt output_&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;-l 10&lt;/code&gt;：指定每个文件包含 10 行。&lt;/p&gt;&lt;p&gt;&lt;code&gt;input.txt&lt;/code&gt;：要拆分的源文件。&lt;/p&gt;&lt;p&gt;&lt;code&gt;output_&lt;/code&gt;：拆分后的文件名前缀（结果文件名将依次是...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/split/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Sun, 12 Jan 2025 14:26:02 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/split/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/bash_help/split/</guid> </item> <item> <title>bonding</title> <description>&lt;p&gt;&lt;strong&gt;网卡绑定（NIC Bonding 或 Network Bonding）&lt;/strong&gt;是指将多块网络接口卡（NIC）绑定在一起，以实现更高的网络吞吐量、更好的冗余性和可靠性。常见于Linux系统中的网卡绑定通过内核支持的多种模式来实现。&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;网卡绑定的常见模式&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;**mode=0（balance-rr，...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/bonding/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Sun, 12 Jan 2025 14:26:02 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/bonding/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/bonding/</guid> </item> </channel></rss>