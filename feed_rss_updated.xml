<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>MarkDown_Log</title><description>yinzhipengのmarkdown_log</description><link>https://yinzhipeng123.github.io/markdown_log/</link><atom:link href="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/yinzhipeng123/markdown_log/</docs><language>en-None</language> <pubDate>Fri, 06 Dec 2024 08:10:25 -0000</pubDate> <lastBuildDate>Fri, 06 Dec 2024 08:10:25 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.7.0</generator> <image> <url>https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png</url> <title>MarkDown_Log</title><link>https://yinzhipeng123.github.io/markdown_log/</link> </image> <item> <title>mq对比</title> <description>&lt;p&gt;RabbitMQ 和 RocketMQ 是两种流行的消息队列，它们适用于不同的场景，各有优缺点。以下是它们的详细对比：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;成熟和稳定&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;开发时间长，拥有广泛的社区支持和插件生态。&lt;/li&gt;&lt;li&gt;经验证的 AMQP 协议...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 08:10:30 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/</guid> </item> <item> <title>redis快速部署</title> <description>&lt;p&gt;Redis单机部署比较简单，以下是一个基本的部署步骤：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;安装Redis&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;在Linux上安装Redis（以Ubuntu为例）：&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bashsudo apt updatesudo apt install redis-server&lt;/code&gt;&lt;/p&gt;&lt;h4&gt;在CentOS上安装R...&lt;/h4&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</guid> </item> <item> <title>redis运维动作</title> <description>&lt;p&gt;Redis 进行日常运维管理。以下是一些检查 Redis 状态是否正常的常见方法，以及一些常见的运维动作&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;查看 Redis 状态是否正常&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;可以通过多种方式检查 Redis 服务的健康状态，下面列出了一些常见的命令和工具。&lt;/p&gt;&lt;p&gt;```bashredis-cli 6.2.16&lt;/p&gt;&lt;p&gt;用法: r...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/</guid> </item> <item> <title>ClusterRole</title> <description>&lt;h3&gt;Role 与 ClusterRole&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Role&lt;/code&gt; 对象就是一个角色包含了一套表示一组权限的规则。但是只对一个&lt;code&gt;namespace&lt;/code&gt;生效，书写规则的时候必须写上针对哪个&lt;code&gt;namespace&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;ClusterRole&lt;/code&gt; 对象也是一个角色包含了一套表示一组权限的规则，但是对整个 Kubernetes 集...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/ClusterRole/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/ClusterRole/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/ClusterRole/</guid> </item> <item> <title>Pipeline</title> <description>&lt;p&gt;&lt;strong&gt;Pipeline&lt;/strong&gt; 在 Jenkins 中是指一组自动化的构建、测试、部署等任务的流程，通常用于实现持续集成（CI）和持续交付（CD）。它通过将这些任务定义为代码，提供了更灵活、可控、可扩展的 CI/CD 流程。Pipeline 可以视为软件开发生命周期中所有自动化步骤的流水线，确保每次提交代码时都会经历相...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/Pipeline/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/Pipeline/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/Pipeline/</guid> </item> <item> <title>etc备份</title> <description>&lt;p&gt;ETC备份&lt;/p&gt;&lt;p&gt;```bashETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \--cacert=/opt/KUIN00601/ca.crt \--cert=/opt/KUIN00601/etcd-client.crt \--key=/o...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/etc%E5%A4%87%E4%BB%BD/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/etc%E5%A4%87%E4%BB%BD/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/etc%E5%A4%87%E4%BB%BD/</guid> </item> <item> <title>节点维护</title> <description>&lt;p&gt;节点维护&lt;/p&gt;&lt;p&gt;&lt;code&gt;bashkubectl cordon node02kubectl get nodeskubectl drain node02 --ignore-daemonsets --delete-emptydir-data --force&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;参数解释&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;[ ] `kubectl d...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/%E8%8A%82%E7%82%B9%E7%BB%B4%E6%8A%A4/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/%E8%8A%82%E7%82%B9%E7%BB%B4%E6%8A%A4/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/lxc/kubernetes/%E8%8A%82%E7%82%B9%E7%BB%B4%E6%8A%A4/</guid> </item> <item> <title>连接器</title> <description>&lt;h3&gt;Kafka Connect 是什么？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Kafka Connect&lt;/strong&gt; 是一个用于在 Kafka 和外部系统（如数据库、文件系统、搜索引擎等）之间快速、可靠地流动数据的框架。它是 Apache Kafka 的一部分，专门设计用于简化和加速数据集成的过程，无需开发复杂的自定义代码。Kafka Conne...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/connect/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/connect/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/connect/</guid> </item> <item> <title>单机部署</title> <description>&lt;p&gt;部署 Kafka 3.9.0 可以按照以下步骤进行：&lt;/p&gt;&lt;h3&gt;1. 安装 Java&lt;/h3&gt;&lt;p&gt;Kafka 需要 Java 8 或更高版本。你可以使用以下命令来安装 Java（以 CentOS 为例）：&lt;/p&gt;&lt;p&gt;&lt;code&gt;bashsudo yum install java-1.8.0-openjdk&lt;/code&gt;&lt;/p&gt;&lt;p&gt;检查 Java 安...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/</guid> </item> <item> <title>基本概念</title> <description>&lt;p&gt;Kafka 是一个分布式流处理平台，主要用于处理大规模的实时数据流。它最初由 LinkedIn 开发，现在是 Apache 软件基金会的一部分。Kafka 可以高效地进行消息传递、数据流处理和日志聚合，广泛应用于实时数据分析、事件驱动架构以及大数据处理等场景。&lt;/p&gt;&lt;p&gt;![image-20241206144139961...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid> </item> <item> <title>去zookeeper新特性</title> <description>&lt;p&gt;&lt;strong&gt;KRaft 模式&lt;/strong&gt;（Kafka Raft Metadata Mode）是 Kafka 的一种新模式，用于替代传统的 &lt;strong&gt;ZooKeeper&lt;/strong&gt;。KRaft 模式是 Kafka 在去除 ZooKeeper 后的独立模式，旨在简化架构并提高性能。KRaft 使用 &lt;strong&gt;Raft 协议&lt;/strong&gt;来管理 Kafka 的元数...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E6%96%B0%E7%89%B9%E6%80%A7/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E6%96%B0%E7%89%B9%E6%80%A7/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E6%96%B0%E7%89%B9%E6%80%A7/</guid> </item> <item> <title>运维命令</title> <description>&lt;h2&gt;查看主题名为『__consumer_offsets』的分区数与副本数&lt;/h2&gt;&lt;p&gt;```bash[root@VM-0-16-centos bin]# sh kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic __consumer_...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/</guid> </item> <item> <title>配置文件详解</title> <description>&lt;h1&gt;&lt;code&gt;config&lt;/code&gt; 目录下的文件列表&lt;/h1&gt;&lt;p&gt;```bashconfig/├── connect-console-sink.properties # Kafka Connect的控制台Sink连接器配置，用于从Kafka读取数据并写入控制台├── connect-console-source.pro...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid> </item> <item> <title>集群模式</title> <description>&lt;p&gt;在 &lt;strong&gt;Kafka 集群模式&lt;/strong&gt; 下，如果一台机器发生故障（例如一台 Broker 宕机），&lt;strong&gt;数据通常不会丢失&lt;/strong&gt;，前提是你已经配置了 &lt;strong&gt;副本&lt;/strong&gt;（Replication）并且副本数量足够（通常是 3 个副本）。Kafka 集群的设计旨在通过 &lt;strong&gt;数据冗余&lt;/strong&gt; 和 &lt;strong&gt;自动故障恢复&lt;/strong&gt; 机制来保证数据的高可用...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 06 Dec 2024 16:08:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/kafka/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</guid> </item> <item> <title>pidstat查看线程内存状态</title> <description>&lt;h1&gt;pidstat 内存相关选项&lt;/h1&gt;&lt;p&gt;```bash[root@VM-0-16-centos ~]# pidstat -r -t | head -n 10Linux 5.14.0-202.el9.x86_64 (VM-0-16-centos) 12/02/2024 &lt;em&gt;x86_64&lt;/em&gt; ...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/pidstat_r/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 03 Dec 2024 14:22:17 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/pidstat_r/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/pidstat_r/</guid> </item> <item> <title>堆栈信息查看</title> <description>&lt;p&gt;线程之间是共享进程的内存的，但每个线程 &lt;strong&gt;拥有独立的栈&lt;/strong&gt;。这里的“共享内存”指的是线程共享进程的全局变量、堆内存和代码段，但每个线程的栈内存是独立的。&lt;/p&gt;&lt;h3&gt;具体解释：&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;共享进程内存&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;[ ] &lt;strong&gt;堆内存&lt;/strong&gt;：所有线程都共享进程的堆内存。堆通常用于动态分配内存，比如通过 `mal...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%A0%86%E6%A0%88/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 03 Dec 2024 14:22:17 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%A0%86%E6%A0%88/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%A0%86%E6%A0%88/</guid> </item> <item> <title>流表</title> <description>&lt;p&gt;&lt;code&gt;tc&lt;/code&gt; 是 Linux 中的流量控制（Traffic Control）工具，通常用于网络流量管理和带宽控制。它允许你配置、调整和监控 Linux 系统的网络接口的流量控制、队列管理、包调度等特性。&lt;code&gt;tc&lt;/code&gt; 命令的常见用途包括流量限速、流量整形、带宽分配、流量优先级等。&lt;/p&gt;&lt;h3&gt;&lt;code&gt;tc&lt;/code&gt; 命令的基本结构&lt;/h3&gt;&lt;p&gt;``...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E6%B5%81%E8%A1%A8/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 03 Dec 2024 14:22:17 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E6%B5%81%E8%A1%A8/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/%E6%B5%81%E8%A1%A8/</guid> </item> <item> <title>TLB</title> <description>&lt;p&gt;TLB（Translation Lookaside Buffer）是&lt;strong&gt;翻译后备缓冲区&lt;/strong&gt;的缩写，它是一个高速缓存，用于存储虚拟地址到物理地址的映射。在计算机的内存管理中，CPU 通过虚拟地址访问内存，而操作系统通过页面表将虚拟地址映射到物理地址。由于访问页面表可能比较慢，TLB 提供了一个缓存机制，存储最近使用...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/TLB/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 17:32:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/TLB/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/TLB/</guid> </item> <item> <title>透明大页</title> <description>&lt;p&gt;&lt;strong&gt;Transparent Huge Pages (THP)&lt;/strong&gt; 是 Linux 内核中的一种内存管理机制，它旨在提高内存访问性能，尤其是在处理大量内存时。它通过使用更大的内存页面来减少页面表的管理开销，从而提高内存访问的效率。这里是关于 THP 的一些关键概念和工作原理：&lt;/p&gt;&lt;h3&gt;1. **内存页面的基本概念...&lt;/h3&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 17:32:15 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5/</guid> </item> <item> <title>内存大页</title> <description>&lt;p&gt;&lt;strong&gt;HugePages&lt;/strong&gt; 是一种内存管理技术，允许操作系统使用&lt;strong&gt;大页面（Huge Pages）&lt;/strong&gt;而不是传统的小页面来提高内存访问效率和减少管理开销。它通常用于内存密集型的应用程序，如数据库、虚拟化、科学计算等，能够提高系统性能，减少内存分配和页面管理的开销。&lt;/p&gt;&lt;h3&gt;1. **页面（Page）与大页面（H...&lt;/h3&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%86%85%E5%AD%98%E5%A4%A7%E9%A1%B5/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 17:29:52 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%86%85%E5%AD%98%E5%A4%A7%E9%A1%B5/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E5%86%85%E5%AD%98/%E5%86%85%E5%AD%98%E5%A4%A7%E9%A1%B5/</guid> </item> </channel></rss>