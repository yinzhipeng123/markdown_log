<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>MarkDown_Log</title><description>yinzhipengのmarkdown_log</description><link>https://yinzhipeng123.github.io/markdown_log/</link><atom:link href="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/yinzhipeng123/markdown_log/</docs><language>en-None</language> <pubDate>Tue, 19 Nov 2024 06:19:36 -0000</pubDate> <lastBuildDate>Tue, 19 Nov 2024 06:19:36 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.7.0</generator> <image> <url>https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png</url> <title>MarkDown_Log</title><link>https://yinzhipeng123.github.io/markdown_log/</link> </image> <item> <title>mq对比</title> <description>&lt;p&gt;RabbitMQ 和 RocketMQ 是两种流行的消息队列，它们适用于不同的场景，各有优缺点。以下是它们的详细对比：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;成熟和稳定&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;开发时间长，拥有广泛的社区支持和插件生态。&lt;/li&gt;&lt;li&gt;经验证的 AMQP 协议...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 06:19:39 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/</guid> </item> <item> <title>查看路由规则</title> <description>&lt;p&gt;在三层交换机上查看路由配置，具体步骤因厂商和操作系统（如华为、思科、H3C等）而异，但一般可以通过以下通用方法查看：&lt;/p&gt;&lt;h3&gt;1. 登录交换机&lt;/h3&gt;&lt;p&gt;使用终端工具（如SecureCRT、PuTTY）通过SSH或串口连接到交换机。&lt;/p&gt;&lt;h3&gt;2. 进入特权模式（视厂商而定）&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;对于思科设备： ```shell ...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/</guid> </item> <item> <title>输入配置</title> <description>&lt;p&gt;向交换机刷入配置（例如初始化配置、恢复配置或升级配置）通常涉及以下步骤，具体操作因交换机厂商而异，但整体流程相似：&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;strong&gt;1. 准备工作&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;检查设备&lt;/strong&gt;：确认交换机型号和当前配置状态，确保备份现有配置以防意外。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;准备配置文件&lt;/strong&gt;：编辑并保存所需配置文件，通常是纯文本文件，文件扩展...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E8%B7%AF%E7%94%B1%E5%99%A8/%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/</guid> </item> <item> <title>CICD概念</title> <description>&lt;p&gt;&lt;strong&gt;CI/CD&lt;/strong&gt; 是 &lt;strong&gt;Continuous Integration/Continuous Delivery&lt;/strong&gt; 或 &lt;strong&gt;Continuous Deployment&lt;/strong&gt; 的缩写，代表了一种现代软件开发与运维的自动化实践流程。它旨在通过持续集成、自动化测试和持续交付或部署，确保代码高质量和快速交付。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/CICD/cicd/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/CICD/cicd/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/CICD/cicd/</guid> </item> <item> <title>mq种类</title> <description>&lt;p&gt;消息队列（Message Queue）是一种用于在不同系统或服务之间传递数据的机制，通常用于解耦生产者和消费者，提高系统的可伸缩性和可靠性。以下是一些常见的消息队列及其特点：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：基于 AMQP（高级消息队列协议）。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;支...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mq/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mq/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mq/</guid> </item> <item> <title>rocketmq部署</title> <description>&lt;p&gt;部署 RocketMQ 通常包括以下几个步骤，从简单的单机部署到生产级的集群部署，以下是详细步骤：&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;strong&gt;一、环境准备&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;&lt;p&gt;Linux 是推荐的环境，但也支持 Windows。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;依赖环境&lt;/strong&gt;：&lt;/p&gt;&lt;/li&gt;&lt;li&gt;JDK 1.8 或更高版本（Java 环境）...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/rocketmq/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/rocketmq/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/MQ/rocketmq/</guid> </item> <item> <title>lvs</title> <description>&lt;p&gt;&lt;strong&gt;LVS（Linux Virtual Server）&lt;/strong&gt; 是一个开源的负载均衡解决方案，用于实现高性能、高可用性的服务集群。它是 Linux 操作系统的一部分，由中国开发者章文嵩博士开发。LVS 基于 IP 层工作，利用 IP 路由机制将客户端的请求分发到后端的真实服务器上，从而提升系统的处理能力和服务稳定性。...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/load_balance/lvs/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/load_balance/lvs/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/load_balance/lvs/</guid> </item> <item> <title>jvm参数调优</title> <description>&lt;p&gt;JVM 参数优化主要包括以下几个方面，根据实际需求进行调优，可以提升 Java 应用的性能和稳定性：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;1. &lt;strong&gt;内存分配参数&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;堆内存大小&lt;/strong&gt;：调整 &lt;code&gt;-Xms&lt;/code&gt; 和 &lt;code&gt;-Xmx&lt;/code&gt; 来设置初始堆大小和最大堆大小。建议设置为相同的值，避免动态调整带来的性能开销。 ```...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/java/jvm/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/java/jvm/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/java/jvm/</guid> </item> <item> <title>新生代_老年代</title> <description>&lt;p&gt;在 JVM 的内存管理中，新生代（Young Generation）和老年代（Old Generation）是堆内存（Heap Memory）的两个主要区域，它们的设计是为了优化垃圾回收（GC）效率。以下是它们的详细介绍：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. 新生代（Young Generation）&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;*&lt;em&gt;定义&lt;/em&gt;...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/java/%E6%96%B0%E7%94%9F%E4%BB%A3_%E8%80%81%E5%B9%B4%E4%BB%A3/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/java/%E6%96%B0%E7%94%9F%E4%BB%A3_%E8%80%81%E5%B9%B4%E4%BB%A3/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/java/%E6%96%B0%E7%94%9F%E4%BB%A3_%E8%80%81%E5%B9%B4%E4%BB%A3/</guid> </item> <item> <title>python装饰器</title> <description>&lt;h1&gt;装饰器&lt;/h1&gt;&lt;p&gt;装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，提高了代码的复用性。装饰器是一个函数，它接收一个函数返回另一个函数。装饰器主要有以下功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;引入日志。&lt;/li&gt;&lt;li&gt;函数执行时间统计。&lt;/li&gt;&lt;li&gt;执行函数前预备处理。&lt;/li&gt;&lt;li&gt;执行函数后的清理功能。&lt;/li&gt;&lt;li&gt;权限校验等场...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/python/%E8%A3%85%E9%A5%B0%E5%99%A8/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/python/%E8%A3%85%E9%A5%B0%E5%99%A8/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/python/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid> </item> <item> <title>Flask</title> <description>&lt;h1&gt;Flask框架&lt;/h1&gt;&lt;p&gt;一个基于python的，简单快速的WEB框架&lt;/p&gt;&lt;p&gt;GitHub地址：https://github.com/pallets/flask&lt;/p&gt;&lt;p&gt;官方文档：https://flask.palletsprojects.com/en/2.0.x/&lt;/p&gt;&lt;h1&gt;Flask g 对象&lt;/h1&gt;&lt;h3&gt;1.什么是g对象。&lt;/h3&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/python/flask/flask_init/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/python/flask/flask_init/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/python/flask/flask_init/</guid> </item> <item> <title>DNS劫持</title> <description>&lt;p&gt;DNS劫持的发生主要是由于网络攻击者利用了DNS解析系统的固有特性或相关设备的漏洞。以下是DNS劫持的常见原因：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. 技术层面的漏洞&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;(1) DNS协议的设计缺陷&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;DNS缺乏加密&lt;/strong&gt;：传统DNS协议是明文传输，容易被中间人拦截和篡改。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;无校验机制&lt;/strong&gt;...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/security/DNS%E5%8A%AB%E6%8C%81/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/security/DNS%E5%8A%AB%E6%8C%81/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/security/DNS%E5%8A%AB%E6%8C%81/</guid> </item> <item> <title>kdump</title> <description>&lt;h2&gt;kdump&lt;/h2&gt;&lt;p&gt;在 CentOS 7 中部署和配置 &lt;code&gt;kdump&lt;/code&gt;（内核转储）功能可以帮助捕获系统崩溃时的内核转储数据，从而进行调试和问题分析。以下是详细步骤：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;1. 安装和启用 kdump&lt;/h3&gt;&lt;h4&gt;1.1 安装 &lt;code&gt;kdump&lt;/code&gt; 和 &lt;code&gt;crash&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;确保系统已安装 &lt;code&gt;kdump&lt;/code&gt; 和 `...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/kdump/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/kdump/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/kdump/</guid> </item> <item> <title>sysrq-trigger</title> <description>&lt;h2&gt;&lt;code&gt;/proc/sysrq-trigger&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/proc/sysrq-trigger&lt;/code&gt; 是 Linux 系统中的一个伪文件，用于直接触发 &lt;strong&gt;SysRq (System Request)&lt;/strong&gt; 按键功能。SysRq 是一种低级别的调试和应急管理功能，提供了一种在系统出现问题（如死机或卡死）时进行操作的方法...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/sysrq-trigger/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/sysrq-trigger/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/sysrq-trigger/</guid> </item> <item> <title>分析vmcore</title> <description>&lt;p&gt;将内核转储文件从机器 A 迁移到机器 B 进行分析的流程需要确保转储文件、内核调试符号和分析工具版本的正确匹配。以下是详细步骤：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. 准备条件&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;在机器 A 上：&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;确保已生成 &lt;code&gt;vmcore&lt;/code&gt; 文件。 &lt;code&gt;bash ls /var/crash&lt;/code&gt; 通...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/%E5%88%86%E6%9E%90vmcore/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/%E5%88%86%E6%9E%90vmcore/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/%E5%88%86%E6%9E%90vmcore/</guid> </item> <item> <title>ethtool命令</title> <description>&lt;h1&gt;ethtool命令&lt;/h1&gt;&lt;p&gt;ethtool是用于查询及设置网卡参数的命令。&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://linux.die.net/man/8/ethtool&#34;&gt;ethtool（8） - Linux 手册页 (die.net)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[ethtool linux 命令 在线中文手册 (51yip.com)](http:/...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ethtool/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ethtool/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ethtool/</guid> </item> <item> <title>ifconfig详解</title> <description>&lt;h1&gt;ifconfig详解&lt;/h1&gt;&lt;p&gt;https://wangchujiang.com/linux-command/c/ifconfig.html&lt;/p&gt;&lt;p&gt;```bash[root@VM-0-16-centos ~]# ifconfigdocker0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULT...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ifconfig%E8%AF%A6%E8%A7%A3/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ifconfig%E8%AF%A6%E8%A7%A3/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ifconfig%E8%AF%A6%E8%A7%A3/</guid> </item> <item> <title>ip命令</title> <description>&lt;p&gt;&lt;code&gt;ip&lt;/code&gt; 命令是 Linux 系统中用于配置和查看网络接口、路由、隧道等网络相关设置的工具。它是 &lt;code&gt;ifconfig&lt;/code&gt; 命令的现代替代品，提供了更多功能和更强大的灵活性。以下是一些常用的 &lt;code&gt;ip&lt;/code&gt; 命令及其作用：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;查看网络接口信息&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;baship addr&lt;/code&gt;这个命令用于查看所...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ip/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ip/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/%E7%BD%91%E7%BB%9C/ip/</guid> </item> <item> <title>cheerytree安装</title> <description>&lt;h2&gt;cherrytree&lt;/h2&gt;&lt;p&gt;cherrytree下载地址： https://www.giuspen.net/cherrytree/#dev&lt;/p&gt;&lt;p&gt;上提供了在线下载二进制包的地方，之前浪费了一天安装brew，因为苹果电脑版本太老，安装包需要解决各种不兼容问题，现在记录一下：&lt;/p&gt;&lt;p&gt;https://gitlab.com/d...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/mac/cheerytree/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/mac/cheerytree/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/mac/cheerytree/</guid> </item> <item> <title>siege压测</title> <description>&lt;p&gt;&lt;code&gt;siege&lt;/code&gt; 是一个功能强大的 HTTP 负载测试和基准测试工具，用于评估 Web 服务器的性能和稳定性。它支持模拟多个用户同时向目标服务器发送请求，从而帮助测试服务器在高负载情况下的表现。&lt;/p&gt;&lt;h3&gt;&lt;code&gt;siege&lt;/code&gt; 的主要功能&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;压力测试&lt;/strong&gt;：通过模拟并发用户来测试服务器的性能。&lt;/li&gt;&lt;li&gt;*&lt;em&gt;基准测试&lt;/em&gt;...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/tool/siege%E5%8E%8B%E6%B5%8B/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Tue, 19 Nov 2024 13:48:18 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_updated.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/tool/siege%E5%8E%8B%E6%B5%8B/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/tool/siege%E5%8E%8B%E6%B5%8B/</guid> </item> </channel></rss>