<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>MarkDown_Log</title><description>yinzhipengのmarkdown_log</description><link>https://yinzhipeng123.github.io/markdown_log/</link><atom:link href="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/yinzhipeng123/markdown_log/</docs><language>en-None</language> <pubDate>Fri, 29 Nov 2024 04:29:33 -0000</pubDate> <lastBuildDate>Fri, 29 Nov 2024 04:29:33 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.7.0</generator> <image> <url>https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png</url> <title>MarkDown_Log</title><link>https://yinzhipeng123.github.io/markdown_log/</link> </image> <item> <title>iptables流量标记</title> <description>&lt;p&gt;基于网络包的源 IP 地址，将流量根据来源地（香港或美国）分发到不同的网卡上。&lt;code&gt;iptables&lt;/code&gt; 负责标记流量，&lt;code&gt;ip rule&lt;/code&gt; 则根据标记选择不同的路由表，从而决定通过哪个网卡转发流量。&lt;/p&gt;&lt;h3&gt;1. 配置路由表&lt;/h3&gt;&lt;p&gt;首先，我们在 &lt;code&gt;/etc/iproute2/rt_tables&lt;/code&gt; 文件中为每个网络接口创建独...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/centos7/iptables%E6%B5%81%E9%87%8F%E6%A0%87%E8%AE%B0/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:48 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/centos7/iptables%E6%B5%81%E9%87%8F%E6%A0%87%E8%AE%B0/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/centos7/iptables%E6%B5%81%E9%87%8F%E6%A0%87%E8%AE%B0/</guid> </item> <item> <title>Ansible部署</title> <description>&lt;p&gt;Ansible 是一个开源的自动化工具，可以在 Linux 和 macOS 上轻松安装。下面是不同平台上安装 Ansible 的步骤：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;在 Linux 上安装 Ansible&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;通过 &lt;code&gt;apt&lt;/code&gt; 安装（适用于 Ubuntu/Debian 系统）&lt;/h4&gt;&lt;p&gt;```bashsudo apt...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E9%83%A8%E7%BD%B2/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:40 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E9%83%A8%E7%BD%B2/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E9%83%A8%E7%BD%B2/</guid> </item> <item> <title>Ansible检查正确性</title> <description>&lt;p&gt;在编写 Ansible playbook 或剧本时，可以使用以下命令来检查其正确性：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ansible-playbook --syntax-check&lt;/code&gt;&lt;/strong&gt; 这是检查 Ansible playbook 语法是否正确的最常用命令。它会检查 playbook 中的 YAML 语法、模块调用和其他语...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E6%A3%80%E6%9F%A5%E6%AD%A3%E7%A1%AE%E6%80%A7/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:40 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E6%A3%80%E6%9F%A5%E6%AD%A3%E7%A1%AE%E6%80%A7/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible%E6%A3%80%E6%9F%A5%E6%AD%A3%E7%A1%AE%E6%80%A7/</guid> </item> <item> <title>Ansible_Dome</title> <description>&lt;p&gt;要使用 Ansible 安装 &lt;code&gt;sar&lt;/code&gt;（一个用于收集和报告系统性能的工具），你可以编写一个简单的 Playbook 来实现。在这个 Playbook 中，我们将使用 Ansible 的 &lt;code&gt;package&lt;/code&gt; 模块来安装软件包。具体步骤如下：&lt;/p&gt;&lt;h3&gt;1. 创建一个 Playbook 文件&lt;/h3&gt;&lt;p&gt;首先，创建一个名为 ...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible_Dome/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:40 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible_Dome/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/programming_language/Ansible_Dome/</guid> </item> <item> <title>mq对比</title> <description>&lt;p&gt;RabbitMQ 和 RocketMQ 是两种流行的消息队列，它们适用于不同的场景，各有优缺点。以下是它们的详细对比：&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;strong&gt;1. RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;成熟和稳定&lt;/strong&gt;：&lt;/li&gt;&lt;li&gt;开发时间长，拥有广泛的社区支持和插件生态。&lt;/li&gt;&lt;li&gt;经验证的 AMQP 协议...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:38 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/middleware/MQ/mqvs/</guid> </item> <item> <title>redis支持存储的类型</title> <description>&lt;p&gt;Redis 支持多种数据类型，超越了传统数据库中的基本键值对模型。Redis 的数据类型使其能够高效地存储和处理复杂的数据结构。下面是 Redis 支持的主要数据类型及其特点：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;字符串（String）&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：这是 Redis 中最基本的数据类型，可以存储任何形式的数据，如字符...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E6%94%AF%E6%8C%81%E5%AD%98%E5%82%A8%E7%9A%84%E7%B1%BB%E5%9E%8B/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 04:29:36 +0000</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E6%94%AF%E6%8C%81%E5%AD%98%E5%82%A8%E7%9A%84%E7%B1%BB%E5%9E%8B/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E6%94%AF%E6%8C%81%E5%AD%98%E5%82%A8%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid> </item> <item> <title>四层还是七层</title> <description>&lt;ul&gt;&lt;li&gt;使用四层负载均衡的场景：&lt;/li&gt;&lt;li&gt;[ ] 大规模 TCP/UDP 服务的负载均衡（如数据库、SMTP、DNS 服务等）。&lt;/li&gt;&lt;li&gt;[ ] 高流量、高并发的服务，主要是需要快速、无状态的负载均衡。&lt;/li&gt;&lt;li&gt;使用七层负载均衡的场景：&lt;/li&gt;&lt;li&gt;[ ] Web 应用、API 网关、微服务架构的负载均衡。&lt;/li&gt;&lt;li&gt;[ ] ...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E5%9B%9B%E5%B1%82%E8%BF%98%E6%98%AF%E4%B8%83%E5%B1%82/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E5%9B%9B%E5%B1%82%E8%BF%98%E6%98%AF%E4%B8%83%E5%B1%82/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/Cloud_Computing/%E5%9B%9B%E5%B1%82%E8%BF%98%E6%98%AF%E4%B8%83%E5%B1%82/</guid> </item> <item> <title>redis</title> <description>&lt;p&gt;Redis（Remote Dictionary Server）是一个开源的内存数据存储系统，常用作缓存、消息代理和数据存储。它支持多种数据结构，如字符串、哈希、列表、集合、有序集合、位图、HyperLogLog等。&lt;/p&gt;&lt;h3&gt;Redis的特点：&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;内存存储&lt;/strong&gt;：Redis将数据存储在内存中，提供非常快的...&lt;/li&gt;&lt;/ol&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis/</guid> </item> <item> <title>redis_info详解</title> <description>&lt;p&gt;Redis info信息含义&lt;/p&gt;&lt;p&gt;```bash127.0.0.1:6379&amp;gt; info&lt;/p&gt;&lt;h1&gt;Server&lt;/h1&gt;&lt;p&gt;redis_version:6.2.16 # Redis 的版本号redis_git_sha1:00000000 # Redis 的 Git 提交 IDredis_git_dirty:0 # 是否...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info/</guid> </item> <item> <title>redis_info_stats详解</title> <description>&lt;p&gt;&lt;code&gt;INFO stats&lt;/code&gt; 输出内容，保留原格式并在每行后面添加注释说明：&lt;/p&gt;&lt;p&gt;```bash127.0.0.1:6379&amp;gt; INFO stats&lt;/p&gt;&lt;h1&gt;Stats&lt;/h1&gt;&lt;p&gt;total_connections_received:13 # Redis 接收到的客户端连接总数total_commands_processed...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info_stats/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info_stats/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis_info_stats/</guid> </item> <item> <title>redis作为缓存的优化方案</title> <description>&lt;p&gt;Redis 作为缓存系统，常见的优化设置包括以下几个方面，旨在提高性能、减少延迟、提升稳定性和扩展性。下面是一些常见的优化配置：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;内存管理优化&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;[ ] &lt;strong&gt;maxmemory&lt;/strong&gt; 设置 Redis 实例的最大内存限制，当内存达到限制时，Redis 会根据 `maxmemory-...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E4%BD%9C%E4%B8%BA%E7%BC%93%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E4%BD%9C%E4%B8%BA%E7%BC%93%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E4%BD%9C%E4%B8%BA%E7%BC%93%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</guid> </item> <item> <title>redis快速部署</title> <description>&lt;p&gt;Redis单机部署比较简单，以下是一个基本的部署步骤：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;安装Redis&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;在Linux上安装Redis（以Ubuntu为例）：&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bashsudo apt updatesudo apt install redis-server&lt;/code&gt;&lt;/p&gt;&lt;h4&gt;在CentOS上安装R...&lt;/h4&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</guid> </item> <item> <title>redis编译安装主从</title> <description>&lt;h3&gt;1. &lt;strong&gt;编译安装 Redis&lt;/strong&gt;&lt;/h3&gt;&lt;h4&gt;步骤 1: 安装必要的依赖&lt;/h4&gt;&lt;p&gt;Redis 编译安装需要一些开发工具和库，首先确保系统中已安装这些依赖。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在 Ubuntu/Debian 上&lt;/strong&gt;：&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;```bash sudo apt update sudo apt install bui...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%BB%E4%BB%8E/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%BB%E4%BB%8E/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%BB%E4%BB%8E/</guid> </item> <item> <title>redis运维动作</title> <description>&lt;p&gt;Redis 进行日常运维管理。以下是一些检查 Redis 状态是否正常的常见方法，以及一些常见的运维动作&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;查看 Redis 状态是否正常&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;可以通过多种方式检查 Redis 服务的健康状态，下面列出了一些常见的命令和工具。&lt;/p&gt;&lt;h4&gt;1.1 使用 &lt;code&gt;redis-cli&lt;/code&gt; 查看基本状态&lt;/h4&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E8%BF%90%E7%BB%B4%E5%8A%A8%E4%BD%9C/</guid> </item> <item> <title>redis部署形态</title> <description>&lt;p&gt;在生产环境中，Redis通常会根据业务需求的不同进行不同的部署和配置。根据规模、可用性、容错性、性能等要求，Redis的部署方式可以从简单的单机部署到复杂的集群部署。以下是几种常见的生产部署形态：&lt;/p&gt;&lt;h3&gt;1. &lt;strong&gt;单机部署（Standalone）&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：只有一个Redis实例在运行，所有的操...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%83%A8%E7%BD%B2%E5%BD%A2%E6%80%81/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%83%A8%E7%BD%B2%E5%BD%A2%E6%80%81/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%83%A8%E7%BD%B2%E5%BD%A2%E6%80%81/</guid> </item> <item> <title>redis配置详解</title> <description>&lt;p&gt;```bash[root@VM-0-16-centos ~]# cat /etc/redis/redis.conf | grep -v &#34;^[[:blank:]]*#&#34; | grep -v &#39;^#&#39; | grep -v &#39;^$&#39; ...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Fri, 29 Nov 2024 10:01:31 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/database/redis/redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid> </item> <item> <title>rsync</title> <description>&lt;p&gt;```bashrsync 版本 3.2.3 协议版本 31版权 (C) 1996-2020 由 Andrew Tridgell, Wayne Davison 及其他人提供官方网站: https://rsync.samba.org/功能： 64 位文件，64 位索引节点，64 位时间戳，64 位长整...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/rsync/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Thu, 28 Nov 2024 15:21:00 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/rsync/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/Linux%E9%80%9A%E7%94%A8%E8%BD%AF%E4%BB%B6/rsync/</guid> </item> <item> <title>partitions</title> <description>&lt;p&gt;&lt;code&gt;cat /proc/partitions&lt;/code&gt; 输出的每一列表示系统中所有块设备和分区的详细信息。具体解释如下：&lt;/p&gt;&lt;p&gt;&lt;code&gt;textmajor minor #blocks name&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;[ ] &lt;strong&gt;major&lt;/strong&gt;：&lt;strong&gt;主设备号&lt;/strong&gt;。这是系统用来识别设备驱动程序的号码。每个块设备（例如硬盘、分区、RAI...&lt;/li&gt;&lt;/ul&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/0proc0partitions/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Thu, 28 Nov 2024 15:21:00 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/0proc0partitions/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/0proc0partitions/</guid> </item> <item> <title>dd命令</title> <description>&lt;h1&gt;DD命令&lt;/h1&gt;&lt;p&gt;以下是 &lt;code&gt;dd&lt;/code&gt; 命令帮助信息的中文翻译：&lt;/p&gt;&lt;p&gt;```bash用法: dd [操作数]... 或: dd 选项复制文件，按操作数转换和格式化。&lt;/p&gt;&lt;p&gt;bs=字节数 每次读写最多字节数（默认为512）；会覆盖 ibs 和 obs 设置 cbs=字节数 每次转换字...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/dd%E5%91%BD%E4%BB%A4/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Thu, 28 Nov 2024 15:21:00 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/dd%E5%91%BD%E4%BB%A4/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/dd%E5%91%BD%E4%BB%A4/</guid> </item> <item> <title>fio命令</title> <description>&lt;h1&gt;FIO命令&lt;/h1&gt;&lt;p&gt;以下是 &lt;code&gt;fio&lt;/code&gt; 命令的帮助信息翻译：&lt;/p&gt;&lt;p&gt;```fio-3.35fio [选项] [作业选项] &amp;lt;作业文件(s)&amp;gt; --debug=选项 启用调试日志。可以是以下之一或多个： process, file, io, mem...&lt;/p&gt;</description><link>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/fio/?utm_source=documentation&amp;utm_medium=RSS&amp;utm_campaign=feed-syndication</link> <pubDate>Thu, 28 Nov 2024 15:21:00 +0800</pubDate><source url="https://yinzhipeng123.github.io/markdown_log/feed_rss_created.xml">MarkDown_Log</source><comments>https://yinzhipeng123.github.io/markdown_log/system/linux/IO/fio/#__comments</comments><guid isPermaLink="true">https://yinzhipeng123.github.io/markdown_log/system/linux/IO/fio/</guid> </item> </channel></rss>